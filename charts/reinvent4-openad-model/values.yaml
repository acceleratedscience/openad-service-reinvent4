# Default values for smi-ted-service-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

buildConfig:
  gitUri: "https://github.com/acceleratedscience/openad_reinvent4.git"  # URL of the git repository
  gitRef: "main"  # Branch of the git repository
  strategy: Docker
  dockerfilePath: Dockerfile  # Path to the Dockerfile
  sourceSecret: {}  # Secret containing the SSH keys
    # name: ssh-privatekey

image:
  tag: "latest"
  pullPolicy: Always
  env:
    - HF_HOME: "/tmp/.cache/huggingface"  # Set the new variable
    - MPLCONFIGDIR: "/tmp/.config/matplotlib"
    - LOGGING_CONFIG_PATH: "/tmp/app.log"  # If you want to set a logging path
    - gt4sd_local_cache_path: "/data/.openad_models"  # !important mount checkpoints to this Volume
    - ENABLE_CACHE_RESULTS: "True"  # enable cache for inference results, enable only for deterministic models
    - gt4sd_s3_bucket_algorithms: gt4sd-cos-properties-artifacts
    - gt4sd_s3_bucket_properties: gt4sd-cos-properties-artifacts
    - gt4sd_s3_bucket_hub_algorithms: gt4sd-cos-properties-artifacts
    - gt4sd_s3_bucket_hub_properties: gt4sd-cos-properties-artifacts
  envFrom: []  # List of Secrets or ConfigMaps to inject into the init container and main container
  #   - secretRef:
  #       name: aws-credentials
  #   - configMapRef:
  #       name: config-map-name

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  # type: NodePort
  port: 80
  targetPort: 8080  # Internal port of your application

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    # nvidia.com/gpu: 1
    cpu: 15000m
    memory: "25Gi"
  requests:
    # nvidia.com/gpu: 1
    cpu: 5000m
    memory: "10Gi"

livenessProbe:
  httpGet:
    path: /health
    port: 8081
  initialDelaySeconds: 10
  periodSeconds: 15
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 15
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 5

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

volumes:
  - name: s3-data-pvc

volumeMounts:
  - name: s3-data-pvc
    mountPath: "/data"

# init container config to download s3 resources
aws:
  # args: # command to run in the init container. # download s3 resources from bucket ahead of time.
  #   - "aws sync s3://<bucket-name> /data"
  # region: 

nodeSelector: {}

tolerations:
  - key: "worker/cpu"
    value: "medium"
    effect: "NoSchedule"


affinity: {}
